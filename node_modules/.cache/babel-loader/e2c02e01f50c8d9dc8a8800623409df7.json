{"ast":null,"code":"import { path } from \"d3-path\";\nimport constant from \"./constant.js\";\nimport asterisk from \"./symbol/asterisk.js\";\nimport circle from \"./symbol/circle.js\";\nimport cross from \"./symbol/cross.js\";\nimport diamond from \"./symbol/diamond.js\";\nimport diamond2 from \"./symbol/diamond2.js\";\nimport plus from \"./symbol/plus.js\";\nimport square from \"./symbol/square.js\";\nimport square2 from \"./symbol/square2.js\";\nimport star from \"./symbol/star.js\";\nimport triangle from \"./symbol/triangle.js\";\nimport triangle2 from \"./symbol/triangle2.js\";\nimport wye from \"./symbol/wye.js\";\nimport x from \"./symbol/x.js\";\n\n// These symbols are designed to be filled.\nexport const symbolsFill = [circle, cross, diamond, square, star, triangle, wye];\n\n// These symbols are designed to be stroked (with a width of 1.5px and round caps).\nexport const symbolsStroke = [circle, plus, x, triangle2, asterisk, square2, diamond2];\nexport default function Symbol(type, size) {\n  let context = null;\n  type = typeof type === \"function\" ? type : constant(type || circle);\n  size = typeof size === \"function\" ? size : constant(size === undefined ? 64 : +size);\n  function symbol() {\n    let buffer;\n    if (!context) context = buffer = path();\n    type.apply(this, arguments).draw(context, +size.apply(this, arguments));\n    if (buffer) return context = null, buffer + \"\" || null;\n  }\n  symbol.type = function (_) {\n    return arguments.length ? (type = typeof _ === \"function\" ? _ : constant(_), symbol) : type;\n  };\n  symbol.size = function (_) {\n    return arguments.length ? (size = typeof _ === \"function\" ? _ : constant(+_), symbol) : size;\n  };\n  symbol.context = function (_) {\n    return arguments.length ? (context = _ == null ? null : _, symbol) : context;\n  };\n  return symbol;\n}","map":{"version":3,"names":["path","constant","asterisk","circle","cross","diamond","diamond2","plus","square","square2","star","triangle","triangle2","wye","x","symbolsFill","symbolsStroke","Symbol","type","size","context","undefined","symbol","buffer","apply","arguments","draw","_","length"],"sources":["C:/Users/ethan/Desktop/projects/team-one/node_modules/d3-shape/src/symbol.js"],"sourcesContent":["import {path} from \"d3-path\";\nimport constant from \"./constant.js\";\nimport asterisk from \"./symbol/asterisk.js\";\nimport circle from \"./symbol/circle.js\";\nimport cross from \"./symbol/cross.js\";\nimport diamond from \"./symbol/diamond.js\";\nimport diamond2 from \"./symbol/diamond2.js\";\nimport plus from \"./symbol/plus.js\";\nimport square from \"./symbol/square.js\";\nimport square2 from \"./symbol/square2.js\";\nimport star from \"./symbol/star.js\";\nimport triangle from \"./symbol/triangle.js\";\nimport triangle2 from \"./symbol/triangle2.js\";\nimport wye from \"./symbol/wye.js\";\nimport x from \"./symbol/x.js\";\n\n// These symbols are designed to be filled.\nexport const symbolsFill = [\n  circle,\n  cross,\n  diamond,\n  square,\n  star,\n  triangle,\n  wye\n];\n\n// These symbols are designed to be stroked (with a width of 1.5px and round caps).\nexport const symbolsStroke = [\n  circle,\n  plus,\n  x,\n  triangle2,\n  asterisk,\n  square2,\n  diamond2\n];\n\nexport default function Symbol(type, size) {\n  let context = null;\n\n  type = typeof type === \"function\" ? type : constant(type || circle);\n  size = typeof size === \"function\" ? size : constant(size === undefined ? 64 : +size);\n\n  function symbol() {\n    let buffer;\n    if (!context) context = buffer = path();\n    type.apply(this, arguments).draw(context, +size.apply(this, arguments));\n    if (buffer) return context = null, buffer + \"\" || null;\n  }\n\n  symbol.type = function(_) {\n    return arguments.length ? (type = typeof _ === \"function\" ? _ : constant(_), symbol) : type;\n  };\n\n  symbol.size = function(_) {\n    return arguments.length ? (size = typeof _ === \"function\" ? _ : constant(+_), symbol) : size;\n  };\n\n  symbol.context = function(_) {\n    return arguments.length ? (context = _ == null ? null : _, symbol) : context;\n  };\n\n  return symbol;\n}\n"],"mappings":"AAAA,SAAQA,IAAI,QAAO,SAAS;AAC5B,OAAOC,QAAQ,MAAM,eAAe;AACpC,OAAOC,QAAQ,MAAM,sBAAsB;AAC3C,OAAOC,MAAM,MAAM,oBAAoB;AACvC,OAAOC,KAAK,MAAM,mBAAmB;AACrC,OAAOC,OAAO,MAAM,qBAAqB;AACzC,OAAOC,QAAQ,MAAM,sBAAsB;AAC3C,OAAOC,IAAI,MAAM,kBAAkB;AACnC,OAAOC,MAAM,MAAM,oBAAoB;AACvC,OAAOC,OAAO,MAAM,qBAAqB;AACzC,OAAOC,IAAI,MAAM,kBAAkB;AACnC,OAAOC,QAAQ,MAAM,sBAAsB;AAC3C,OAAOC,SAAS,MAAM,uBAAuB;AAC7C,OAAOC,GAAG,MAAM,iBAAiB;AACjC,OAAOC,CAAC,MAAM,eAAe;;AAE7B;AACA,OAAO,MAAMC,WAAW,GAAG,CACzBZ,MAAM,EACNC,KAAK,EACLC,OAAO,EACPG,MAAM,EACNE,IAAI,EACJC,QAAQ,EACRE,GAAG,CACJ;;AAED;AACA,OAAO,MAAMG,aAAa,GAAG,CAC3Bb,MAAM,EACNI,IAAI,EACJO,CAAC,EACDF,SAAS,EACTV,QAAQ,EACRO,OAAO,EACPH,QAAQ,CACT;AAED,eAAe,SAASW,MAAM,CAACC,IAAI,EAAEC,IAAI,EAAE;EACzC,IAAIC,OAAO,GAAG,IAAI;EAElBF,IAAI,GAAG,OAAOA,IAAI,KAAK,UAAU,GAAGA,IAAI,GAAGjB,QAAQ,CAACiB,IAAI,IAAIf,MAAM,CAAC;EACnEgB,IAAI,GAAG,OAAOA,IAAI,KAAK,UAAU,GAAGA,IAAI,GAAGlB,QAAQ,CAACkB,IAAI,KAAKE,SAAS,GAAG,EAAE,GAAG,CAACF,IAAI,CAAC;EAEpF,SAASG,MAAM,GAAG;IAChB,IAAIC,MAAM;IACV,IAAI,CAACH,OAAO,EAAEA,OAAO,GAAGG,MAAM,GAAGvB,IAAI,EAAE;IACvCkB,IAAI,CAACM,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC,CAACC,IAAI,CAACN,OAAO,EAAE,CAACD,IAAI,CAACK,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC,CAAC;IACvE,IAAIF,MAAM,EAAE,OAAOH,OAAO,GAAG,IAAI,EAAEG,MAAM,GAAG,EAAE,IAAI,IAAI;EACxD;EAEAD,MAAM,CAACJ,IAAI,GAAG,UAASS,CAAC,EAAE;IACxB,OAAOF,SAAS,CAACG,MAAM,IAAIV,IAAI,GAAG,OAAOS,CAAC,KAAK,UAAU,GAAGA,CAAC,GAAG1B,QAAQ,CAAC0B,CAAC,CAAC,EAAEL,MAAM,IAAIJ,IAAI;EAC7F,CAAC;EAEDI,MAAM,CAACH,IAAI,GAAG,UAASQ,CAAC,EAAE;IACxB,OAAOF,SAAS,CAACG,MAAM,IAAIT,IAAI,GAAG,OAAOQ,CAAC,KAAK,UAAU,GAAGA,CAAC,GAAG1B,QAAQ,CAAC,CAAC0B,CAAC,CAAC,EAAEL,MAAM,IAAIH,IAAI;EAC9F,CAAC;EAEDG,MAAM,CAACF,OAAO,GAAG,UAASO,CAAC,EAAE;IAC3B,OAAOF,SAAS,CAACG,MAAM,IAAIR,OAAO,GAAGO,CAAC,IAAI,IAAI,GAAG,IAAI,GAAGA,CAAC,EAAEL,MAAM,IAAIF,OAAO;EAC9E,CAAC;EAED,OAAOE,MAAM;AACf"},"metadata":{},"sourceType":"module"}