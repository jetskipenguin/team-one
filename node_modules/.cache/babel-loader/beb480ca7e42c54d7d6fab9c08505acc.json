{"ast":null,"code":"import Path from \"./path.js\";\nimport Polygon from \"./polygon.js\";\nexport default class Voronoi {\n  constructor(delaunay) {\n    let [xmin, ymin, xmax, ymax] = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 960, 500];\n    if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error(\"invalid bounds\");\n    this.delaunay = delaunay;\n    this._circumcenters = new Float64Array(delaunay.points.length * 2);\n    this.vectors = new Float64Array(delaunay.points.length * 2);\n    this.xmax = xmax, this.xmin = xmin;\n    this.ymax = ymax, this.ymin = ymin;\n    this._init();\n  }\n  update() {\n    this.delaunay.update();\n    this._init();\n    return this;\n  }\n  _init() {\n    const {\n      delaunay: {\n        points,\n        hull,\n        triangles\n      },\n      vectors\n    } = this;\n\n    // Compute circumcenters.\n    const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);\n    for (let i = 0, j = 0, n = triangles.length, x, y; i < n; i += 3, j += 2) {\n      const t1 = triangles[i] * 2;\n      const t2 = triangles[i + 1] * 2;\n      const t3 = triangles[i + 2] * 2;\n      const x1 = points[t1];\n      const y1 = points[t1 + 1];\n      const x2 = points[t2];\n      const y2 = points[t2 + 1];\n      const x3 = points[t3];\n      const y3 = points[t3 + 1];\n      const dx = x2 - x1;\n      const dy = y2 - y1;\n      const ex = x3 - x1;\n      const ey = y3 - y1;\n      const ab = (dx * ey - dy * ex) * 2;\n      if (Math.abs(ab) < 1e-9) {\n        // degenerate case (collinear diagram)\n        // almost equal points (degenerate triangle)\n        // the circumcenter is at the infinity, in a\n        // direction that is:\n        // 1. orthogonal to the halfedge.\n        let a = 1e9;\n        // 2. points away from the center; since the list of triangles starts\n        // in the center, the first point of the first triangle\n        // will be our reference\n        const r = triangles[0] * 2;\n        a *= Math.sign((points[r] - x1) * ey - (points[r + 1] - y1) * ex);\n        x = (x1 + x3) / 2 - a * ey;\n        y = (y1 + y3) / 2 + a * ex;\n      } else {\n        const d = 1 / ab;\n        const bl = dx * dx + dy * dy;\n        const cl = ex * ex + ey * ey;\n        x = x1 + (ey * bl - dy * cl) * d;\n        y = y1 + (dx * cl - ex * bl) * d;\n      }\n      circumcenters[j] = x;\n      circumcenters[j + 1] = y;\n    }\n\n    // Compute exterior cell rays.\n    let h = hull[hull.length - 1];\n    let p0,\n      p1 = h * 4;\n    let x0,\n      x1 = points[2 * h];\n    let y0,\n      y1 = points[2 * h + 1];\n    vectors.fill(0);\n    for (let i = 0; i < hull.length; ++i) {\n      h = hull[i];\n      p0 = p1, x0 = x1, y0 = y1;\n      p1 = h * 4, x1 = points[2 * h], y1 = points[2 * h + 1];\n      vectors[p0 + 2] = vectors[p1] = y0 - y1;\n      vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;\n    }\n  }\n  render(context) {\n    const buffer = context == null ? context = new Path() : undefined;\n    const {\n      delaunay: {\n        halfedges,\n        inedges,\n        hull\n      },\n      circumcenters,\n      vectors\n    } = this;\n    if (hull.length <= 1) return null;\n    for (let i = 0, n = halfedges.length; i < n; ++i) {\n      const j = halfedges[i];\n      if (j < i) continue;\n      const ti = Math.floor(i / 3) * 2;\n      const tj = Math.floor(j / 3) * 2;\n      const xi = circumcenters[ti];\n      const yi = circumcenters[ti + 1];\n      const xj = circumcenters[tj];\n      const yj = circumcenters[tj + 1];\n      this._renderSegment(xi, yi, xj, yj, context);\n    }\n    let h0,\n      h1 = hull[hull.length - 1];\n    for (let i = 0; i < hull.length; ++i) {\n      h0 = h1, h1 = hull[i];\n      const t = Math.floor(inedges[h1] / 3) * 2;\n      const x = circumcenters[t];\n      const y = circumcenters[t + 1];\n      const v = h0 * 4;\n      const p = this._project(x, y, vectors[v + 2], vectors[v + 3]);\n      if (p) this._renderSegment(x, y, p[0], p[1], context);\n    }\n    return buffer && buffer.value();\n  }\n  renderBounds(context) {\n    const buffer = context == null ? context = new Path() : undefined;\n    context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);\n    return buffer && buffer.value();\n  }\n  renderCell(i, context) {\n    const buffer = context == null ? context = new Path() : undefined;\n    const points = this._clip(i);\n    if (points === null || !points.length) return;\n    context.moveTo(points[0], points[1]);\n    let n = points.length;\n    while (points[0] === points[n - 2] && points[1] === points[n - 1] && n > 1) n -= 2;\n    for (let i = 2; i < n; i += 2) {\n      if (points[i] !== points[i - 2] || points[i + 1] !== points[i - 1]) context.lineTo(points[i], points[i + 1]);\n    }\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  *cellPolygons() {\n    const {\n      delaunay: {\n        points\n      }\n    } = this;\n    for (let i = 0, n = points.length / 2; i < n; ++i) {\n      const cell = this.cellPolygon(i);\n      if (cell) cell.index = i, yield cell;\n    }\n  }\n  cellPolygon(i) {\n    const polygon = new Polygon();\n    this.renderCell(i, polygon);\n    return polygon.value();\n  }\n  _renderSegment(x0, y0, x1, y1, context) {\n    let S;\n    const c0 = this._regioncode(x0, y0);\n    const c1 = this._regioncode(x1, y1);\n    if (c0 === 0 && c1 === 0) {\n      context.moveTo(x0, y0);\n      context.lineTo(x1, y1);\n    } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {\n      context.moveTo(S[0], S[1]);\n      context.lineTo(S[2], S[3]);\n    }\n  }\n  contains(i, x, y) {\n    if ((x = +x, x !== x) || (y = +y, y !== y)) return false;\n    return this.delaunay._step(i, x, y) === i;\n  }\n  *neighbors(i) {\n    const ci = this._clip(i);\n    if (ci) for (const j of this.delaunay.neighbors(i)) {\n      const cj = this._clip(j);\n      // find the common edge\n      if (cj) loop: for (let ai = 0, li = ci.length; ai < li; ai += 2) {\n        for (let aj = 0, lj = cj.length; aj < lj; aj += 2) {\n          if (ci[ai] == cj[aj] && ci[ai + 1] == cj[aj + 1] && ci[(ai + 2) % li] == cj[(aj + lj - 2) % lj] && ci[(ai + 3) % li] == cj[(aj + lj - 1) % lj]) {\n            yield j;\n            break loop;\n          }\n        }\n      }\n    }\n  }\n  _cell(i) {\n    const {\n      circumcenters,\n      delaunay: {\n        inedges,\n        halfedges,\n        triangles\n      }\n    } = this;\n    const e0 = inedges[i];\n    if (e0 === -1) return null; // coincident point\n    const points = [];\n    let e = e0;\n    do {\n      const t = Math.floor(e / 3);\n      points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) break; // bad triangulation\n      e = halfedges[e];\n    } while (e !== e0 && e !== -1);\n    return points;\n  }\n  _clip(i) {\n    // degenerate case (1 valid point: return the box)\n    if (i === 0 && this.delaunay.hull.length === 1) {\n      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n    }\n    const points = this._cell(i);\n    if (points === null) return null;\n    const {\n      vectors: V\n    } = this;\n    const v = i * 4;\n    return V[v] || V[v + 1] ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3]) : this._clipFinite(i, points);\n  }\n  _clipFinite(i, points) {\n    const n = points.length;\n    let P = null;\n    let x0,\n      y0,\n      x1 = points[n - 2],\n      y1 = points[n - 1];\n    let c0,\n      c1 = this._regioncode(x1, y1);\n    let e0,\n      e1 = 0;\n    for (let j = 0; j < n; j += 2) {\n      x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];\n      c0 = c1, c1 = this._regioncode(x1, y1);\n      if (c0 === 0 && c1 === 0) {\n        e0 = e1, e1 = 0;\n        if (P) P.push(x1, y1);else P = [x1, y1];\n      } else {\n        let S, sx0, sy0, sx1, sy1;\n        if (c0 === 0) {\n          if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue;\n          [sx0, sy0, sx1, sy1] = S;\n        } else {\n          if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue;\n          [sx1, sy1, sx0, sy0] = S;\n          e0 = e1, e1 = this._edgecode(sx0, sy0);\n          if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n          if (P) P.push(sx0, sy0);else P = [sx0, sy0];\n        }\n        e0 = e1, e1 = this._edgecode(sx1, sy1);\n        if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n        if (P) P.push(sx1, sy1);else P = [sx1, sy1];\n      }\n    }\n    if (P) {\n      e0 = e1, e1 = this._edgecode(P[0], P[1]);\n      if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n    }\n    return P;\n  }\n  _clipSegment(x0, y0, x1, y1, c0, c1) {\n    while (true) {\n      if (c0 === 0 && c1 === 0) return [x0, y0, x1, y1];\n      if (c0 & c1) return null;\n      let x,\n        y,\n        c = c0 || c1;\n      if (c & 0b1000) x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;else if (c & 0b0100) x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;else if (c & 0b0010) y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;else y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;\n      if (c0) x0 = x, y0 = y, c0 = this._regioncode(x0, y0);else x1 = x, y1 = y, c1 = this._regioncode(x1, y1);\n    }\n  }\n  _clipInfinite(i, points, vx0, vy0, vxn, vyn) {\n    let P = Array.from(points),\n      p;\n    if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);\n    if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);\n    if (P = this._clipFinite(i, P)) {\n      for (let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {\n        c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);\n        if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;\n      }\n    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n      P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];\n    }\n    return P;\n  }\n  _edge(i, e0, e1, P, j) {\n    while (e0 !== e1) {\n      let x, y;\n      switch (e0) {\n        case 0b0101:\n          e0 = 0b0100;\n          continue;\n        // top-left\n        case 0b0100:\n          e0 = 0b0110, x = this.xmax, y = this.ymin;\n          break;\n        // top\n        case 0b0110:\n          e0 = 0b0010;\n          continue;\n        // top-right\n        case 0b0010:\n          e0 = 0b1010, x = this.xmax, y = this.ymax;\n          break;\n        // right\n        case 0b1010:\n          e0 = 0b1000;\n          continue;\n        // bottom-right\n        case 0b1000:\n          e0 = 0b1001, x = this.xmin, y = this.ymax;\n          break;\n        // bottom\n        case 0b1001:\n          e0 = 0b0001;\n          continue;\n        // bottom-left\n        case 0b0001:\n          e0 = 0b0101, x = this.xmin, y = this.ymin;\n          break;\n        // left\n      }\n      // Note: this implicitly checks for out of bounds: if P[j] or P[j+1] are\n      // undefined, the conditional statement will be executed.\n      if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) {\n        P.splice(j, 0, x, y), j += 2;\n      }\n    }\n    if (P.length > 4) {\n      for (let i = 0; i < P.length; i += 2) {\n        const j = (i + 2) % P.length,\n          k = (i + 4) % P.length;\n        if (P[i] === P[j] && P[j] === P[k] || P[i + 1] === P[j + 1] && P[j + 1] === P[k + 1]) P.splice(j, 2), i -= 2;\n      }\n    }\n    return j;\n  }\n  _project(x0, y0, vx, vy) {\n    let t = Infinity,\n      c,\n      x,\n      y;\n    if (vy < 0) {\n      // top\n      if (y0 <= this.ymin) return null;\n      if ((c = (this.ymin - y0) / vy) < t) y = this.ymin, x = x0 + (t = c) * vx;\n    } else if (vy > 0) {\n      // bottom\n      if (y0 >= this.ymax) return null;\n      if ((c = (this.ymax - y0) / vy) < t) y = this.ymax, x = x0 + (t = c) * vx;\n    }\n    if (vx > 0) {\n      // right\n      if (x0 >= this.xmax) return null;\n      if ((c = (this.xmax - x0) / vx) < t) x = this.xmax, y = y0 + (t = c) * vy;\n    } else if (vx < 0) {\n      // left\n      if (x0 <= this.xmin) return null;\n      if ((c = (this.xmin - x0) / vx) < t) x = this.xmin, y = y0 + (t = c) * vy;\n    }\n    return [x, y];\n  }\n  _edgecode(x, y) {\n    return (x === this.xmin ? 0b0001 : x === this.xmax ? 0b0010 : 0b0000) | (y === this.ymin ? 0b0100 : y === this.ymax ? 0b1000 : 0b0000);\n  }\n  _regioncode(x, y) {\n    return (x < this.xmin ? 0b0001 : x > this.xmax ? 0b0010 : 0b0000) | (y < this.ymin ? 0b0100 : y > this.ymax ? 0b1000 : 0b0000);\n  }\n}","map":{"version":3,"names":["Path","Polygon","Voronoi","constructor","delaunay","xmin","ymin","xmax","ymax","Error","_circumcenters","Float64Array","points","length","vectors","_init","update","hull","triangles","circumcenters","subarray","i","j","n","x","y","t1","t2","t3","x1","y1","x2","y2","x3","y3","dx","dy","ex","ey","ab","Math","abs","a","r","sign","d","bl","cl","h","p0","p1","x0","y0","fill","render","context","buffer","undefined","halfedges","inedges","ti","floor","tj","xi","yi","xj","yj","_renderSegment","h0","h1","t","v","p","_project","value","renderBounds","rect","renderCell","_clip","moveTo","lineTo","closePath","cellPolygons","cell","cellPolygon","index","polygon","S","c0","_regioncode","c1","_clipSegment","contains","_step","neighbors","ci","cj","loop","ai","li","aj","lj","_cell","e0","e","push","V","_clipInfinite","_clipFinite","P","e1","sx0","sy0","sx1","sy1","_edgecode","_edge","c","vx0","vy0","vxn","vyn","Array","from","unshift","splice","k","vx","vy","Infinity"],"sources":["C:/Users/ethan/Desktop/projects/team-one/node_modules/d3-delaunay/src/voronoi.js"],"sourcesContent":["import Path from \"./path.js\";\nimport Polygon from \"./polygon.js\";\n\nexport default class Voronoi {\n  constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {\n    if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error(\"invalid bounds\");\n    this.delaunay = delaunay;\n    this._circumcenters = new Float64Array(delaunay.points.length * 2);\n    this.vectors = new Float64Array(delaunay.points.length * 2);\n    this.xmax = xmax, this.xmin = xmin;\n    this.ymax = ymax, this.ymin = ymin;\n    this._init();\n  }\n  update() {\n    this.delaunay.update();\n    this._init();\n    return this;\n  }\n  _init() {\n    const {delaunay: {points, hull, triangles}, vectors} = this;\n\n    // Compute circumcenters.\n    const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);\n    for (let i = 0, j = 0, n = triangles.length, x, y; i < n; i += 3, j += 2) {\n      const t1 = triangles[i] * 2;\n      const t2 = triangles[i + 1] * 2;\n      const t3 = triangles[i + 2] * 2;\n      const x1 = points[t1];\n      const y1 = points[t1 + 1];\n      const x2 = points[t2];\n      const y2 = points[t2 + 1];\n      const x3 = points[t3];\n      const y3 = points[t3 + 1];\n\n      const dx = x2 - x1;\n      const dy = y2 - y1;\n      const ex = x3 - x1;\n      const ey = y3 - y1;\n      const ab = (dx * ey - dy * ex) * 2;\n\n      if (Math.abs(ab) < 1e-9) {\n        // degenerate case (collinear diagram)\n        // almost equal points (degenerate triangle)\n        // the circumcenter is at the infinity, in a\n        // direction that is:\n        // 1. orthogonal to the halfedge.\n        let a = 1e9;\n        // 2. points away from the center; since the list of triangles starts\n        // in the center, the first point of the first triangle\n        // will be our reference\n        const r = triangles[0] * 2;\n        a *= Math.sign((points[r] - x1) * ey - (points[r + 1] - y1) * ex);\n        x = (x1 + x3) / 2 - a * ey;\n        y = (y1 + y3) / 2 + a * ex;\n      } else {\n        const d = 1 / ab;\n        const bl = dx * dx + dy * dy;\n        const cl = ex * ex + ey * ey;\n        x = x1 + (ey * bl - dy * cl) * d;\n        y = y1 + (dx * cl - ex * bl) * d;\n      }\n      circumcenters[j] = x;\n      circumcenters[j + 1] = y;\n    }\n\n    // Compute exterior cell rays.\n    let h = hull[hull.length - 1];\n    let p0, p1 = h * 4;\n    let x0, x1 = points[2 * h];\n    let y0, y1 = points[2 * h + 1];\n    vectors.fill(0);\n    for (let i = 0; i < hull.length; ++i) {\n      h = hull[i];\n      p0 = p1, x0 = x1, y0 = y1;\n      p1 = h * 4, x1 = points[2 * h], y1 = points[2 * h + 1];\n      vectors[p0 + 2] = vectors[p1] = y0 - y1;\n      vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;\n    }\n  }\n  render(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {delaunay: {halfedges, inedges, hull}, circumcenters, vectors} = this;\n    if (hull.length <= 1) return null;\n    for (let i = 0, n = halfedges.length; i < n; ++i) {\n      const j = halfedges[i];\n      if (j < i) continue;\n      const ti = Math.floor(i / 3) * 2;\n      const tj = Math.floor(j / 3) * 2;\n      const xi = circumcenters[ti];\n      const yi = circumcenters[ti + 1];\n      const xj = circumcenters[tj];\n      const yj = circumcenters[tj + 1];\n      this._renderSegment(xi, yi, xj, yj, context);\n    }\n    let h0, h1 = hull[hull.length - 1];\n    for (let i = 0; i < hull.length; ++i) {\n      h0 = h1, h1 = hull[i];\n      const t = Math.floor(inedges[h1] / 3) * 2;\n      const x = circumcenters[t];\n      const y = circumcenters[t + 1];\n      const v = h0 * 4;\n      const p = this._project(x, y, vectors[v + 2], vectors[v + 3]);\n      if (p) this._renderSegment(x, y, p[0], p[1], context);\n    }\n    return buffer && buffer.value();\n  }\n  renderBounds(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);\n    return buffer && buffer.value();\n  }\n  renderCell(i, context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const points = this._clip(i);\n    if (points === null || !points.length) return;\n    context.moveTo(points[0], points[1]);\n    let n = points.length;\n    while (points[0] === points[n-2] && points[1] === points[n-1] && n > 1) n -= 2;\n    for (let i = 2; i < n; i += 2) {\n      if (points[i] !== points[i-2] || points[i+1] !== points[i-1])\n        context.lineTo(points[i], points[i + 1]);\n    }\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  *cellPolygons() {\n    const {delaunay: {points}} = this;\n    for (let i = 0, n = points.length / 2; i < n; ++i) {\n      const cell = this.cellPolygon(i);\n      if (cell) cell.index = i, yield cell;\n    }\n  }\n  cellPolygon(i) {\n    const polygon = new Polygon;\n    this.renderCell(i, polygon);\n    return polygon.value();\n  }\n  _renderSegment(x0, y0, x1, y1, context) {\n    let S;\n    const c0 = this._regioncode(x0, y0);\n    const c1 = this._regioncode(x1, y1);\n    if (c0 === 0 && c1 === 0) {\n      context.moveTo(x0, y0);\n      context.lineTo(x1, y1);\n    } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {\n      context.moveTo(S[0], S[1]);\n      context.lineTo(S[2], S[3]);\n    }\n  }\n  contains(i, x, y) {\n    if ((x = +x, x !== x) || (y = +y, y !== y)) return false;\n    return this.delaunay._step(i, x, y) === i;\n  }\n  *neighbors(i) {\n    const ci = this._clip(i);\n    if (ci) for (const j of this.delaunay.neighbors(i)) {\n      const cj = this._clip(j);\n      // find the common edge\n      if (cj) loop: for (let ai = 0, li = ci.length; ai < li; ai += 2) {\n        for (let aj = 0, lj = cj.length; aj < lj; aj += 2) {\n          if (ci[ai] == cj[aj]\n          && ci[ai + 1] == cj[aj + 1]\n          && ci[(ai + 2) % li] == cj[(aj + lj - 2) % lj]\n          && ci[(ai + 3) % li] == cj[(aj + lj - 1) % lj]\n          ) {\n            yield j;\n            break loop;\n          }\n        }\n      }\n    }\n  }\n  _cell(i) {\n    const {circumcenters, delaunay: {inedges, halfedges, triangles}} = this;\n    const e0 = inedges[i];\n    if (e0 === -1) return null; // coincident point\n    const points = [];\n    let e = e0;\n    do {\n      const t = Math.floor(e / 3);\n      points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) break; // bad triangulation\n      e = halfedges[e];\n    } while (e !== e0 && e !== -1);\n    return points;\n  }\n  _clip(i) {\n    // degenerate case (1 valid point: return the box)\n    if (i === 0 && this.delaunay.hull.length === 1) {\n      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n    }\n    const points = this._cell(i);\n    if (points === null) return null;\n    const {vectors: V} = this;\n    const v = i * 4;\n    return V[v] || V[v + 1]\n        ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3])\n        : this._clipFinite(i, points);\n  }\n  _clipFinite(i, points) {\n    const n = points.length;\n    let P = null;\n    let x0, y0, x1 = points[n - 2], y1 = points[n - 1];\n    let c0, c1 = this._regioncode(x1, y1);\n    let e0, e1 = 0;\n    for (let j = 0; j < n; j += 2) {\n      x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];\n      c0 = c1, c1 = this._regioncode(x1, y1);\n      if (c0 === 0 && c1 === 0) {\n        e0 = e1, e1 = 0;\n        if (P) P.push(x1, y1);\n        else P = [x1, y1];\n      } else {\n        let S, sx0, sy0, sx1, sy1;\n        if (c0 === 0) {\n          if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue;\n          [sx0, sy0, sx1, sy1] = S;\n        } else {\n          if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue;\n          [sx1, sy1, sx0, sy0] = S;\n          e0 = e1, e1 = this._edgecode(sx0, sy0);\n          if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n          if (P) P.push(sx0, sy0);\n          else P = [sx0, sy0];\n        }\n        e0 = e1, e1 = this._edgecode(sx1, sy1);\n        if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n        if (P) P.push(sx1, sy1);\n        else P = [sx1, sy1];\n      }\n    }\n    if (P) {\n      e0 = e1, e1 = this._edgecode(P[0], P[1]);\n      if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n    }\n    return P;\n  }\n  _clipSegment(x0, y0, x1, y1, c0, c1) {\n    while (true) {\n      if (c0 === 0 && c1 === 0) return [x0, y0, x1, y1];\n      if (c0 & c1) return null;\n      let x, y, c = c0 || c1;\n      if (c & 0b1000) x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;\n      else if (c & 0b0100) x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;\n      else if (c & 0b0010) y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;\n      else y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;\n      if (c0) x0 = x, y0 = y, c0 = this._regioncode(x0, y0);\n      else x1 = x, y1 = y, c1 = this._regioncode(x1, y1);\n    }\n  }\n  _clipInfinite(i, points, vx0, vy0, vxn, vyn) {\n    let P = Array.from(points), p;\n    if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);\n    if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);\n    if (P = this._clipFinite(i, P)) {\n      for (let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {\n        c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);\n        if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;\n      }\n    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n      P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];\n    }\n    return P;\n  }\n  _edge(i, e0, e1, P, j) {\n    while (e0 !== e1) {\n      let x, y;\n      switch (e0) {\n        case 0b0101: e0 = 0b0100; continue; // top-left\n        case 0b0100: e0 = 0b0110, x = this.xmax, y = this.ymin; break; // top\n        case 0b0110: e0 = 0b0010; continue; // top-right\n        case 0b0010: e0 = 0b1010, x = this.xmax, y = this.ymax; break; // right\n        case 0b1010: e0 = 0b1000; continue; // bottom-right\n        case 0b1000: e0 = 0b1001, x = this.xmin, y = this.ymax; break; // bottom\n        case 0b1001: e0 = 0b0001; continue; // bottom-left\n        case 0b0001: e0 = 0b0101, x = this.xmin, y = this.ymin; break; // left\n      }\n      // Note: this implicitly checks for out of bounds: if P[j] or P[j+1] are\n      // undefined, the conditional statement will be executed.\n      if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) {\n        P.splice(j, 0, x, y), j += 2;\n      }\n    }\n    if (P.length > 4) {\n      for (let i = 0; i < P.length; i+= 2) {\n        const j = (i + 2) % P.length, k = (i + 4) % P.length;\n        if (P[i] === P[j] && P[j] === P[k]\n        || P[i + 1] === P[j + 1] && P[j + 1] === P[k + 1])\n          P.splice(j, 2), i -= 2;\n      }\n    }\n    return j;\n  }\n  _project(x0, y0, vx, vy) {\n    let t = Infinity, c, x, y;\n    if (vy < 0) { // top\n      if (y0 <= this.ymin) return null;\n      if ((c = (this.ymin - y0) / vy) < t) y = this.ymin, x = x0 + (t = c) * vx;\n    } else if (vy > 0) { // bottom\n      if (y0 >= this.ymax) return null;\n      if ((c = (this.ymax - y0) / vy) < t) y = this.ymax, x = x0 + (t = c) * vx;\n    }\n    if (vx > 0) { // right\n      if (x0 >= this.xmax) return null;\n      if ((c = (this.xmax - x0) / vx) < t) x = this.xmax, y = y0 + (t = c) * vy;\n    } else if (vx < 0) { // left\n      if (x0 <= this.xmin) return null;\n      if ((c = (this.xmin - x0) / vx) < t) x = this.xmin, y = y0 + (t = c) * vy;\n    }\n    return [x, y];\n  }\n  _edgecode(x, y) {\n    return (x === this.xmin ? 0b0001\n        : x === this.xmax ? 0b0010 : 0b0000)\n        | (y === this.ymin ? 0b0100\n        : y === this.ymax ? 0b1000 : 0b0000);\n  }\n  _regioncode(x, y) {\n    return (x < this.xmin ? 0b0001\n        : x > this.xmax ? 0b0010 : 0b0000)\n        | (y < this.ymin ? 0b0100\n        : y > this.ymax ? 0b1000 : 0b0000);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}