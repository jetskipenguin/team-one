{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ethan\\\\Desktop\\\\projects\\\\team-one\\\\src\\\\components\\\\StreamGraph\\\\LineChart.js\";\nimport React, { Component } from 'react';\nimport { scaleBand, scaleUtc, scaleLinear, scaleTime, scaleSequential } from 'd3-scale';\nimport * as d3 from 'd3';\nimport Axes from './Axes';\nimport Line from './Line';\nimport data from './data/data';\nimport { timeDay } from 'd3-time';\nimport { timeFormat, timeParse } from \"d3-time-format\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass LineChart extends Component {\n  constructor() {\n    super();\n    this.xScale = scaleLinear();\n    this.yScale = scaleLinear();\n  }\n  render() {\n    let margins = {\n      top: 20,\n      right: 30,\n      bottom: 30,\n      left: 60\n    };\n    const svgDimensions = {\n      width: 460 - margins.left - margins.right,\n      height: 400 - margins.top - margins.bottom\n    };\n    const max = d3.max(data, d => Math.abs(d.value));\n    const min = d3.min(data, d => Math.abs(d.value));\n    const columns = ['Amanda', 'Ashley', 'Betty', 'Deborah', 'Dorothy', 'Helen', 'Linda', 'Patricia'];\n    // const  stackGen = d3.stack()\n    //     .keys(columns)\n\n    // const stackedSeries = stackGen(data)\n    // console.log(stackedSeries)\n    const xScale = this.xScale\n    //  .domain([new Date(data[0].date), new Date(data[data.length-1].date)]).nice()\n    .domain(d3.extent(data, d => d.year)) //d3.extend return [min,max]\n    // .domain(data.map(d => d.date))\n    .range([0, svgDimensions.width]);\n    const yScale = this.yScale.domain([-100000, 100000]).range([svgDimensions.height, 0]);\n    const stackedData = d3.stack().offset(d3.stackOffsetSilhouette).keys(columns)(data);\n    console.log(stackedData);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        width: svgDimensions.width + margins.left + margins.right,\n        height: svgDimensions.height + margins.top + margins.bottom,\n        children: [/*#__PURE__*/_jsxDEV(Axes, {\n          scales: {\n            xScale,\n            yScale\n          },\n          margins: margins,\n          svgDimensions: svgDimensions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          scales: {\n            xScale,\n            yScale\n          },\n          svgDimensions: svgDimensions,\n          margins: margins,\n          maxValue: max,\n          minValue: min,\n          data: stackedData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 12\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this);\n  }\n}\nexport default LineChart;","map":{"version":3,"names":["React","Component","scaleBand","scaleUtc","scaleLinear","scaleTime","scaleSequential","d3","Axes","Line","data","timeDay","timeFormat","timeParse","LineChart","constructor","xScale","yScale","render","margins","top","right","bottom","left","svgDimensions","width","height","max","d","Math","abs","value","min","columns","domain","extent","year","range","stackedData","stack","offset","stackOffsetSilhouette","keys","console","log"],"sources":["C:/Users/ethan/Desktop/projects/team-one/src/components/StreamGraph/LineChart.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { scaleBand, scaleUtc, scaleLinear, scaleTime, scaleSequential} from 'd3-scale'\r\nimport * as d3 from 'd3';\r\nimport Axes from './Axes'\r\nimport Line from './Line'\r\nimport data from './data/data'\r\nimport { timeDay } from 'd3-time';\r\nimport {timeFormat, timeParse} from \"d3-time-format\"\r\n\r\nclass LineChart extends Component {\r\n  constructor() {\r\n    super()\r\n      this.xScale = scaleLinear()\r\n      this.yScale = scaleLinear()\r\n    }\r\n    render() {\r\n        let margins = {top: 20, right: 30, bottom: 30, left: 60}\r\n        const svgDimensions = { width: 460 - margins.left - margins.right, height: 400 - margins.top - margins.bottom}\r\n        const max = d3.max(data, d => Math.abs(d.value))\r\n        const min= d3.min(data, d => Math.abs(d.value))\r\n       \r\n\r\n        const columns=['Amanda','Ashley','Betty','Deborah','Dorothy','Helen','Linda','Patricia']\r\n        // const  stackGen = d3.stack()\r\n        //     .keys(columns)\r\n            \r\n        // const stackedSeries = stackGen(data)\r\n        // console.log(stackedSeries)\r\n        const xScale = this.xScale\r\n                //  .domain([new Date(data[0].date), new Date(data[data.length-1].date)]).nice()\r\n                .domain(d3.extent(data, d => d.year))//d3.extend return [min,max]\r\n                // .domain(data.map(d => d.date))\r\n                .range([0, svgDimensions.width])\r\n\r\n        const yScale = this.yScale\r\n                .domain([-100000, 100000])\r\n                .range([svgDimensions.height,0])\r\n\r\n        const stackedData = d3.stack()\r\n                .offset(d3.stackOffsetSilhouette)\r\n                .keys(columns)\r\n                (data)\r\n        console.log(stackedData)\r\n\r\n        return (\r\n        <div>\r\n           <svg  width={svgDimensions.width + margins.left + margins.right} height={svgDimensions.height + margins.top + margins.bottom}>\r\n              <Axes\r\n                  scales={{ xScale, yScale }}\r\n                  margins={margins}\r\n                  svgDimensions={svgDimensions}\r\n              />\r\n              <Line scales={{ xScale, yScale }}\r\n                  svgDimensions={svgDimensions}\r\n                  margins={margins}\r\n                  maxValue={max}\r\n                  minValue={min}\r\n                  data={stackedData} \r\n              />\r\n            </svg> \r\n          </div>\r\n        );\r\n      }\r\n}\r\nexport default LineChart;"],"mappings":"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"},"metadata":{},"sourceType":"module"}